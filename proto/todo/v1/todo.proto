syntax = "proto3";

package todo.v1;

import "google/protobuf/timestamp.proto";
import "google/protobuf/empty.proto";

option go_package = "github.com/wcygan/simple-connect-web-stack/internal/gen/todo/v1;todov1";

// TodoService provides CRUD operations for tasks
service TodoService {
  // Create a new task
  rpc CreateTask(CreateTaskRequest) returns (CreateTaskResponse);
  
  // Get a specific task by ID
  rpc GetTask(GetTaskRequest) returns (GetTaskResponse);
  
  // List tasks with pagination, filtering, and search
  rpc ListTasks(ListTasksRequest) returns (ListTasksResponse);
  
  // Update an existing task
  rpc UpdateTask(UpdateTaskRequest) returns (UpdateTaskResponse);
  
  // Delete a task
  rpc DeleteTask(DeleteTaskRequest) returns (google.protobuf.Empty);
  
  // Health check endpoint
  rpc HealthCheck(google.protobuf.Empty) returns (HealthCheckResponse);
}

// Task represents a todo item
message Task {
  string id = 1;                               // UUID v4
  string title = 2;                            // Task title (max 255 chars)
  bool completed = 3;                          // Completion status
  google.protobuf.Timestamp created_at = 4;    // Creation timestamp
  google.protobuf.Timestamp updated_at = 5;    // Last update timestamp
}

// CreateTaskRequest contains the data needed to create a new task
message CreateTaskRequest {
  string title = 1; // Required, max 255 chars
}

// CreateTaskResponse returns the newly created task
message CreateTaskResponse {
  Task task = 1;
}

// GetTaskRequest identifies which task to retrieve
message GetTaskRequest {
  string id = 1; // Task UUID
}

// GetTaskResponse returns the requested task
message GetTaskResponse {
  Task task = 1;
}

// ListTasksRequest contains filters and pagination options
message ListTasksRequest {
  // Pagination
  uint32 page = 1;          // Page number (1-based), default: 1
  uint32 page_size = 2;     // Items per page, default: 20, max: 100
  
  // Filters
  string query = 3;         // Search in title
  StatusFilter status = 4;  // Filter by completion status
  
  // Sorting
  SortField sort_by = 5;    // Field to sort by
  SortOrder sort_order = 6; // Sort direction
}

// StatusFilter options for task filtering
enum StatusFilter {
  STATUS_FILTER_UNSPECIFIED = 0;
  STATUS_FILTER_ALL = 1;
  STATUS_FILTER_COMPLETED = 2;
  STATUS_FILTER_PENDING = 3;
}

// SortField options for task sorting
enum SortField {
  SORT_FIELD_UNSPECIFIED = 0;
  SORT_FIELD_CREATED_AT = 1;
  SORT_FIELD_UPDATED_AT = 2;
  SORT_FIELD_TITLE = 3;
}

// SortOrder options
enum SortOrder {
  SORT_ORDER_UNSPECIFIED = 0;
  SORT_ORDER_ASC = 1;
  SORT_ORDER_DESC = 2;
}

// ListTasksResponse returns paginated tasks
message ListTasksResponse {
  repeated Task tasks = 1;
  PaginationMetadata pagination = 2;
}

// PaginationMetadata provides pagination information
message PaginationMetadata {
  uint32 page = 1;         // Current page
  uint32 page_size = 2;    // Items per page
  uint32 total_pages = 3;  // Total number of pages
  uint32 total_items = 4;  // Total number of items
  bool has_previous = 5;   // Whether there's a previous page
  bool has_next = 6;       // Whether there's a next page
}

// UpdateTaskRequest contains the task update data
message UpdateTaskRequest {
  string id = 1;        // Task UUID
  string title = 2;     // New title (optional)
  bool completed = 3;   // New completion status
}

// UpdateTaskResponse returns the updated task
message UpdateTaskResponse {
  Task task = 1;
}

// DeleteTaskRequest identifies which task to delete
message DeleteTaskRequest {
  string id = 1; // Task UUID
}

// HealthCheckResponse indicates service health
message HealthCheckResponse {
  string status = 1; // "ok" when healthy
}